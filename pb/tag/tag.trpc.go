// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: tag.proto

package tag

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// TagService defines service.
type TagService interface {
	DescribeTagInfo(ctx context.Context, req *DescribeTagRequest) (*DescribeTagInfoResponse, error)
}

func TagService_DescribeTagInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTagRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(TagService).DescribeTagInfo(ctx, reqbody.(*DescribeTagRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// TagServer_ServiceDesc descriptor for server.RegisterService.
var TagServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.poetry.Tag",
	HandlerType: ((*TagService)(nil)),
	Methods: []server.Method{
		{
			Name: "/poetry/DescribeTagInfo",
			Func: TagService_DescribeTagInfo_Handler,
		},
		{
			Name: "/trpc.poetry.Tag/DescribeTagInfo",
			Func: TagService_DescribeTagInfo_Handler,
		},
	},
}

// RegisterTagService registers service.
func RegisterTagService(s server.Service, svr TagService) {
	if err := s.Register(&TagServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Tag register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTag struct{}

func (s *UnimplementedTag) DescribeTagInfo(ctx context.Context, req *DescribeTagRequest) (*DescribeTagInfoResponse, error) {
	return nil, errors.New("rpc DescribeTagInfo of service Tag is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TagClientProxy defines service client proxy
type TagClientProxy interface {
	DescribeTagInfo(ctx context.Context, req *DescribeTagRequest, opts ...client.Option) (rsp *DescribeTagInfoResponse, err error)
}

type TagClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewTagClientProxy = func(opts ...client.Option) TagClientProxy {
	return &TagClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *TagClientProxyImpl) DescribeTagInfo(ctx context.Context, req *DescribeTagRequest, opts ...client.Option) (*DescribeTagInfoResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/DescribeTagInfo")
	msg.WithCalleeServiceName(TagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Tag")
	msg.WithCalleeMethod("DescribeTagInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTagInfoResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
