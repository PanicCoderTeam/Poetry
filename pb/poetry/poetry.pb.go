// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.15.8
// source: poetry.proto

package poetry

import (
	common "poetry/pb/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "trpc.group/trpc/trpc-protocol/pb/go/trpc/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribePoetryInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        []*common.Filter       `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribePoetryInfoRequest) Reset() {
	*x = DescribePoetryInfoRequest{}
	mi := &file_poetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribePoetryInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePoetryInfoRequest) ProtoMessage() {}

func (x *DescribePoetryInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePoetryInfoRequest.ProtoReflect.Descriptor instead.
func (*DescribePoetryInfoRequest) Descriptor() ([]byte, []int) {
	return file_poetry_proto_rawDescGZIP(), []int{0}
}

func (x *DescribePoetryInfoRequest) GetFilter() []*common.Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DescribePoetryInfoRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DescribePoetryInfoRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PoetryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Paragraphs    string                 `protobuf:"bytes,3,opt,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	Author        string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Rhythmic      string                 `protobuf:"bytes,5,opt,name=rhythmic,proto3" json:"rhythmic,omitempty"`
	Notes         string                 `protobuf:"bytes,6,opt,name=notes,proto3" json:"notes,omitempty"`
	PoetryType    string                 `protobuf:"bytes,7,opt,name=poetryType,proto3" json:"poetryType,omitempty"`
	Dynasty       string                 `protobuf:"bytes,8,opt,name=dynasty,proto3" json:"dynasty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoetryInfo) Reset() {
	*x = PoetryInfo{}
	mi := &file_poetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoetryInfo) ProtoMessage() {}

func (x *PoetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_poetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoetryInfo.ProtoReflect.Descriptor instead.
func (*PoetryInfo) Descriptor() ([]byte, []int) {
	return file_poetry_proto_rawDescGZIP(), []int{1}
}

func (x *PoetryInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PoetryInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PoetryInfo) GetParagraphs() string {
	if x != nil {
		return x.Paragraphs
	}
	return ""
}

func (x *PoetryInfo) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PoetryInfo) GetRhythmic() string {
	if x != nil {
		return x.Rhythmic
	}
	return ""
}

func (x *PoetryInfo) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *PoetryInfo) GetPoetryType() string {
	if x != nil {
		return x.PoetryType
	}
	return ""
}

func (x *PoetryInfo) GetDynasty() string {
	if x != nil {
		return x.Dynasty
	}
	return ""
}

type DescribePoetryInfoResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Total          int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PoetryInfoList []*PoetryInfo          `protobuf:"bytes,2,rep,name=poetryInfoList,proto3" json:"poetryInfoList,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DescribePoetryInfoResponse) Reset() {
	*x = DescribePoetryInfoResponse{}
	mi := &file_poetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribePoetryInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePoetryInfoResponse) ProtoMessage() {}

func (x *DescribePoetryInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePoetryInfoResponse.ProtoReflect.Descriptor instead.
func (*DescribePoetryInfoResponse) Descriptor() ([]byte, []int) {
	return file_poetry_proto_rawDescGZIP(), []int{2}
}

func (x *DescribePoetryInfoResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribePoetryInfoResponse) GetPoetryInfoList() []*PoetryInfo {
	if x != nil {
		return x.PoetryInfoList
	}
	return nil
}

var File_poetry_proto protoreflect.FileDescriptor

const file_poetry_proto_rawDesc = "" +
	"\n" +
	"\fpoetry.proto\x12\vtrpc.poetry\x1a\x1dtrpc/proto/trpc_options.proto\x1a\fcommon.proto\"q\n" +
	"\x19DescribePoetryInfoRequest\x12&\n" +
	"\x06filter\x18\x01 \x03(\v2\x0e.common.FilterR\x06filter\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x05R\x05limit\"\xd6\x01\n" +
	"\n" +
	"PoetryInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1e\n" +
	"\n" +
	"paragraphs\x18\x03 \x01(\tR\n" +
	"paragraphs\x12\x16\n" +
	"\x06author\x18\x04 \x01(\tR\x06author\x12\x1a\n" +
	"\brhythmic\x18\x05 \x01(\tR\brhythmic\x12\x14\n" +
	"\x05notes\x18\x06 \x01(\tR\x05notes\x12\x1e\n" +
	"\n" +
	"poetryType\x18\a \x01(\tR\n" +
	"poetryType\x12\x18\n" +
	"\adynasty\x18\b \x01(\tR\adynasty\"s\n" +
	"\x1aDescribePoetryInfoResponse\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x05R\x05total\x12?\n" +
	"\x0epoetryInfoList\x18\x02 \x03(\v2\x17.trpc.poetry.PoetryInfoR\x0epoetryInfoList2\x90\x01\n" +
	"\x06Poetry\x12\x85\x01\n" +
	"\x12DescribePoetryInfo\x12&.trpc.poetry.DescribePoetryInfoRequest\x1a'.trpc.poetry.DescribePoetryInfoResponse\"\x1e\x8a\xb5\x18\x1a/poetry/DescribePoetryInfoB\vZ\tpb/poetryb\x06proto3"

var (
	file_poetry_proto_rawDescOnce sync.Once
	file_poetry_proto_rawDescData []byte
)

func file_poetry_proto_rawDescGZIP() []byte {
	file_poetry_proto_rawDescOnce.Do(func() {
		file_poetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_poetry_proto_rawDesc), len(file_poetry_proto_rawDesc)))
	})
	return file_poetry_proto_rawDescData
}

var file_poetry_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_poetry_proto_goTypes = []any{
	(*DescribePoetryInfoRequest)(nil),  // 0: trpc.poetry.DescribePoetryInfoRequest
	(*PoetryInfo)(nil),                 // 1: trpc.poetry.PoetryInfo
	(*DescribePoetryInfoResponse)(nil), // 2: trpc.poetry.DescribePoetryInfoResponse
	(*common.Filter)(nil),              // 3: common.Filter
}
var file_poetry_proto_depIdxs = []int32{
	3, // 0: trpc.poetry.DescribePoetryInfoRequest.filter:type_name -> common.Filter
	1, // 1: trpc.poetry.DescribePoetryInfoResponse.poetryInfoList:type_name -> trpc.poetry.PoetryInfo
	0, // 2: trpc.poetry.Poetry.DescribePoetryInfo:input_type -> trpc.poetry.DescribePoetryInfoRequest
	2, // 3: trpc.poetry.Poetry.DescribePoetryInfo:output_type -> trpc.poetry.DescribePoetryInfoResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_poetry_proto_init() }
func file_poetry_proto_init() {
	if File_poetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_poetry_proto_rawDesc), len(file_poetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poetry_proto_goTypes,
		DependencyIndexes: file_poetry_proto_depIdxs,
		MessageInfos:      file_poetry_proto_msgTypes,
	}.Build()
	File_poetry_proto = out.File
	file_poetry_proto_goTypes = nil
	file_poetry_proto_depIdxs = nil
}
