// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: game_user.proto

package game_user

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// UserService defines service.
type UserService interface {
	Login(ctx context.Context, req *LoginRequest) (*LoginResp, error)

	CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResp, error)
}

func UserService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LoginRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserService).Login(ctx, reqbody.(*LoginRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func UserService_CreateUser_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateUserRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(UserService).CreateUser(ctx, reqbody.(*CreateUserRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// UserServer_ServiceDesc descriptor for server.RegisterService.
var UserServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.game_user.User",
	HandlerType: ((*UserService)(nil)),
	Methods: []server.Method{
		{
			Name: "/poetry/Login",
			Func: UserService_Login_Handler,
		},
		{
			Name: "/poetry/CreateUser",
			Func: UserService_CreateUser_Handler,
		},
		{
			Name: "/trpc.game_user.User/Login",
			Func: UserService_Login_Handler,
		},
		{
			Name: "/trpc.game_user.User/CreateUser",
			Func: UserService_CreateUser_Handler,
		},
	},
}

// RegisterUserService registers service.
func RegisterUserService(s server.Service, svr UserService) {
	if err := s.Register(&UserServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("User register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedUser struct{}

func (s *UnimplementedUser) Login(ctx context.Context, req *LoginRequest) (*LoginResp, error) {
	return nil, errors.New("rpc Login of service User is not implemented")
}
func (s *UnimplementedUser) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResp, error) {
	return nil, errors.New("rpc CreateUser of service User is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// UserClientProxy defines service client proxy
type UserClientProxy interface {
	Login(ctx context.Context, req *LoginRequest, opts ...client.Option) (rsp *LoginResp, err error)

	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...client.Option) (rsp *CreateUserResp, err error)
}

type UserClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewUserClientProxy = func(opts ...client.Option) UserClientProxy {
	return &UserClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *UserClientProxyImpl) Login(ctx context.Context, req *LoginRequest, opts ...client.Option) (*LoginResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/Login")
	msg.WithCalleeServiceName(UserServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("User")
	msg.WithCalleeMethod("Login")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LoginResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *UserClientProxyImpl) CreateUser(ctx context.Context, req *CreateUserRequest, opts ...client.Option) (*CreateUserResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/CreateUser")
	msg.WithCalleeServiceName(UserServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("User")
	msg.WithCalleeMethod("CreateUser")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateUserResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
