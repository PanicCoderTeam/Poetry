// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: game_room.proto

package game_room

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// GameRoomService defines service.
type GameRoomService interface {
	CreateGameRoom(ctx context.Context, req *CreateGameRoomRequest) (*CreateGameRoomResp, error)

	JoinGameRoom(ctx context.Context, req *JoinGameRoomRequest) (*JoinGameRoomResp, error)

	DescribeGameRoom(ctx context.Context, req *DescribeGameRoomRequest) (*DescribeGameRoomResp, error)

	LeaveGameRoom(ctx context.Context, req *LeaveGameRoomRequest) (*LeaveGameRoomResp, error)
}

func GameRoomService_CreateGameRoom_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateGameRoomRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GameRoomService).CreateGameRoom(ctx, reqbody.(*CreateGameRoomRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GameRoomService_JoinGameRoom_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &JoinGameRoomRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GameRoomService).JoinGameRoom(ctx, reqbody.(*JoinGameRoomRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GameRoomService_DescribeGameRoom_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeGameRoomRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GameRoomService).DescribeGameRoom(ctx, reqbody.(*DescribeGameRoomRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GameRoomService_LeaveGameRoom_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LeaveGameRoomRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GameRoomService).LeaveGameRoom(ctx, reqbody.(*LeaveGameRoomRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// GameRoomServer_ServiceDesc descriptor for server.RegisterService.
var GameRoomServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.game.GameRoom",
	HandlerType: ((*GameRoomService)(nil)),
	Methods: []server.Method{
		{
			Name: "/poetry/CreateGameRoom",
			Func: GameRoomService_CreateGameRoom_Handler,
		},
		{
			Name: "/poetry/JoinGameRoom",
			Func: GameRoomService_JoinGameRoom_Handler,
		},
		{
			Name: "/poetry/DescribeGameRoom",
			Func: GameRoomService_DescribeGameRoom_Handler,
		},
		{
			Name: "/poetry/LeaveGameRoom",
			Func: GameRoomService_LeaveGameRoom_Handler,
		},
		{
			Name: "/trpc.game.GameRoom/CreateGameRoom",
			Func: GameRoomService_CreateGameRoom_Handler,
		},
		{
			Name: "/trpc.game.GameRoom/JoinGameRoom",
			Func: GameRoomService_JoinGameRoom_Handler,
		},
		{
			Name: "/trpc.game.GameRoom/DescribeGameRoom",
			Func: GameRoomService_DescribeGameRoom_Handler,
		},
		{
			Name: "/trpc.game.GameRoom/LeaveGameRoom",
			Func: GameRoomService_LeaveGameRoom_Handler,
		},
	},
}

// RegisterGameRoomService registers service.
func RegisterGameRoomService(s server.Service, svr GameRoomService) {
	if err := s.Register(&GameRoomServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("GameRoom register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedGameRoom struct{}

func (s *UnimplementedGameRoom) CreateGameRoom(ctx context.Context, req *CreateGameRoomRequest) (*CreateGameRoomResp, error) {
	return nil, errors.New("rpc CreateGameRoom of service GameRoom is not implemented")
}
func (s *UnimplementedGameRoom) JoinGameRoom(ctx context.Context, req *JoinGameRoomRequest) (*JoinGameRoomResp, error) {
	return nil, errors.New("rpc JoinGameRoom of service GameRoom is not implemented")
}
func (s *UnimplementedGameRoom) DescribeGameRoom(ctx context.Context, req *DescribeGameRoomRequest) (*DescribeGameRoomResp, error) {
	return nil, errors.New("rpc DescribeGameRoom of service GameRoom is not implemented")
}
func (s *UnimplementedGameRoom) LeaveGameRoom(ctx context.Context, req *LeaveGameRoomRequest) (*LeaveGameRoomResp, error) {
	return nil, errors.New("rpc LeaveGameRoom of service GameRoom is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// GameRoomClientProxy defines service client proxy
type GameRoomClientProxy interface {
	CreateGameRoom(ctx context.Context, req *CreateGameRoomRequest, opts ...client.Option) (rsp *CreateGameRoomResp, err error)

	JoinGameRoom(ctx context.Context, req *JoinGameRoomRequest, opts ...client.Option) (rsp *JoinGameRoomResp, err error)

	DescribeGameRoom(ctx context.Context, req *DescribeGameRoomRequest, opts ...client.Option) (rsp *DescribeGameRoomResp, err error)

	LeaveGameRoom(ctx context.Context, req *LeaveGameRoomRequest, opts ...client.Option) (rsp *LeaveGameRoomResp, err error)
}

type GameRoomClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGameRoomClientProxy = func(opts ...client.Option) GameRoomClientProxy {
	return &GameRoomClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GameRoomClientProxyImpl) CreateGameRoom(ctx context.Context, req *CreateGameRoomRequest, opts ...client.Option) (*CreateGameRoomResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/CreateGameRoom")
	msg.WithCalleeServiceName(GameRoomServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GameRoom")
	msg.WithCalleeMethod("CreateGameRoom")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateGameRoomResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GameRoomClientProxyImpl) JoinGameRoom(ctx context.Context, req *JoinGameRoomRequest, opts ...client.Option) (*JoinGameRoomResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/JoinGameRoom")
	msg.WithCalleeServiceName(GameRoomServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GameRoom")
	msg.WithCalleeMethod("JoinGameRoom")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &JoinGameRoomResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GameRoomClientProxyImpl) DescribeGameRoom(ctx context.Context, req *DescribeGameRoomRequest, opts ...client.Option) (*DescribeGameRoomResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/DescribeGameRoom")
	msg.WithCalleeServiceName(GameRoomServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GameRoom")
	msg.WithCalleeMethod("DescribeGameRoom")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeGameRoomResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GameRoomClientProxyImpl) LeaveGameRoom(ctx context.Context, req *LeaveGameRoomRequest, opts ...client.Option) (*LeaveGameRoomResp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/poetry/LeaveGameRoom")
	msg.WithCalleeServiceName(GameRoomServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GameRoom")
	msg.WithCalleeMethod("LeaveGameRoom")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LeaveGameRoomResp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
